" ==========================================
" plugged 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, gtags, clangd(llvm), asytle, asytle, nodejs, yarn
" python dependence:   pep8, pyflake, pynvim, pygments

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:plugged_groups')
    " let g:plugged_groups=['python', 'javascript', 'golang', 'php', 'ruby', 'shell', 'markdown', 'less', 'coffeescript', 'tmux', 'json', 'beta']
    " ycm / coc 二选一, 否则会有冲突, vim>8 or neovim 推荐使用 coc 
    " ycm --> nerdtree + json 
    " cocnvim --> coc-explorer + vista + coc-json
    let g:plugged_groups=['python', 'golang', 'markdown-preview', 'markdown-edit', 'tmux', 'shell', 'protobuf', 'coc', 'graphviz', 'bazel', 'beta']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" syntastic 语法检查
if v:version < 800
    Plug 'scrooloose/syntastic'
    " syntastic {{{
    if has_key(g:plugs, 'syntastic')
        " dependence
        " 1. shellcheck `brew install shellcheck` https://github.com/koalaman/shellcheck
    
        let g:syntastic_error_symbol='>>'
        let g:syntastic_warning_symbol='>'
        let g:syntastic_check_on_open=1
        let g:syntastic_check_on_wq=0
        let g:syntastic_enable_highlighting=1
    
        " checkers
        " python
        " pip install flake8
        let g:syntastic_python_checkers=['flake8', ] " 使用pyflakes,速度比pylint快
        let g:syntastic_python_flake8_options='--ignore=E501,E225,E124,E712,E116,E131'
    
        " javascript
        " let g:syntastic_javascript_checkers = ['jsl', 'jshint']
        " let g:syntastic_html_checkers=['tidy', 'jshint']
        " npm install -g eslint eslint-plugin-standard eslint-plugin-promise eslint-config-standard
        " npm install -g eslint-plugin-import eslint-plugin-node eslint-plugin-html babel-eslint
        let g:syntastic_javascript_checkers = ['eslint']
    
        " to see error location list
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_enable_signs = 1
        let g:syntastic_auto_loc_list = 0
        let g:syntastic_auto_jump = 0
        let g:syntastic_loc_list_height = 5
    
        function! ToggleErrors()
            let old_last_winnr = winnr('$')
            lclose
            if old_last_winnr == winnr('$')
                " Nothing was closed, open syntastic_error location panel
                Errors
            endif
        endfunction
        nnoremap <Leader>s :call ToggleErrors()<cr>
    
        " ,en ,ep to jump between errors
        function! <SID>LocationPrevious()
        try
            lprev
        catch /^Vim\%((\a\+)\)\=:E553/
            llast
        endtry
        endfunction
    
        function! <SID>LocationNext()
        try
            lnext
        catch /^Vim\%((\a\+)\)\=:E553/
            lfirst
        endtry
        endfunction
    
        nnoremap <silent> <Plug>LocationPrevious    :<C-u>exe 'call <SID>LocationPrevious()'<CR>
        nnoremap <silent> <Plug>LocationNext        :<C-u>exe 'call <SID>LocationNext()'<CR>
        nmap <silent> <Leader>ep    <Plug>LocationPrevious
        nmap <silent> <Leader>en    <Plug>LocationNext
    
        " 修改高亮的背景色, 适应主题
        highlight SyntasticErrorSign guifg=white guibg=black
    
        " 禁止插件检查java
        " thanks to @marsqing, see https://github.com/wklken/k-vim/issues/164
        let g:syntastic_mode_map = {'mode': 'active', 'passive_filetypes': ['java'] }
    
        " 关闭syntastic语法检查, 鼠标复制代码时用到, 防止把错误标志给复制了
        nnoremap <silent> <Leader>ec :SyntasticToggleMode<CR>
    endif
    " }}}
else
    Plug 'w0rp/ale'
    " ale {{{
    if has_key(g:plugs, 'ale')
        " pip install flake8 pylint?
        " npm install -g eslint eslint-plugin-standard eslint-plugin-promise eslint-config-standard
        " npm install -g eslint-plugin-import eslint-plugin-node eslint-plugin-html babel-eslint
        let g:ale_linters = {
        \   'python': ['flake8'],
        \   'javascript': ['eslint'],
        \   'json': ['fixjson'],
        \   'cpp': ['cppcheck','clang'],
        \}

        let g:ale_fixers = {
        \   'python': ['yapf'],
        \   'json': ['fixjson'],
        \   'cpp': ['clang-format'],
        \   'scala': ['scalafmt'],
        \}

        let g:ale_fix_on_save = 1
        let g:ale_python_flake8_options="--ignore=E121,E123,E126,E226,E24,E704,W503 --max-line-length=120"

        let g:ale_sign_error = '✘'
        let g:ale_sign_warning = '⚠'

        let b:ale_warn_about_trailing_whitespace = 0
        let g:ale_sign_column_always = 1

        let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

        nmap <silent> <Leader>ep <Plug>(ale_previous_wrap)
        nmap <silent> <Leader>en <Plug>(ale_next_wrap)

        nnoremap <silent> <Leader>ec :ALEToggle<CR>

        " troggle quickfix list
        function! ToggleErrors()
            let old_last_winnr = winnr('$')
            lclose
            if old_last_winnr == winnr('$')
                " Nothing was closed, open syntastic_error location panel
                lopen
            endif
        endfunction
        nnoremap <Leader>s :call ToggleErrors()<cr>

        let g:ale_set_highlights = 1
        highlight clear ALEErrorSign
        highlight clear ALEWarningSign

    endif

    " }}}
endif

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" 自动补全括号
Plug 'jiangmiao/auto-pairs'

" 内容搜索
Plug 'dyng/ctrlsf.vim'
" ctrlsf {{{
    let g:ctrlsf_populate_qflist = 1
    if v:version > 800
        let g:ctrlsf_search_mode = 'async'
    endif 
    let g:ctrlsf_position = 'left'
    let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_ackprg = 'ag'

    " noremap <C-F> :<C-U><C-R>=printf("CtrlSF %s ", expand("<cword>"))<CR>
" }}}

if count(g:plugged_groups, 'ycm')
    " auto complete
    " 代码自动补全
    " 迄今为止用到的最好的自动VIM自动补全插件
    " 重启 :YcmRestartServer
    Plug 'Valloric/YouCompleteMe', { 'do': '/usr/local/bin/python3 install.py --clang-completer --go-completer --rust-completer' }
    " YouCompleteMe {{{
        "youcompleteme  默认tab  s-tab 和自动补全冲突
        "let g:ycm_key_list_select_completion=['<C-n>']
        let g:ycm_key_list_select_completion = ['<Down>']
        "let g:ycm_key_list_previous_completion=['<C-p>']
        let g:ycm_key_list_previous_completion = ['<Up>']
        let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
        let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
        let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
        let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
        let g:ycm_collect_identifiers_from_tags_files = 1
        " 开启语法关键字补全
        let g:ycm_seed_identifiers_with_syntax=1
        " 回车作为选中
        let g:ycm_key_list_stop_completion = ['<CR>']
    
        "let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
    
        " python semantic completion
        let g:ycm_python_binary_path='/usr/local/bin/python3'
    
        " 跳转到定义处, 分屏打开
        let g:ycm_goto_buffer_command = 'horizontal-split'
        let g:ycm_register_as_syntastic_checker = 0
        " nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
        nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
        nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
        nnoremap <C-]> :YcmCompleter GoTo<CR>
    
        " 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
        " old version
        if !empty(glob("~/.vim/plugged/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/plugged/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
        endif
        " new version
        if !empty(glob("~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
        endif
        " new version
        if !empty(glob("~/.vim/plugged/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py"))
            let g:ycm_global_ycm_extra_conf = "~/.vim/plugged/YouCompleteMe/third_party/ycmd/examples/.ycm_extra_conf.py"
        endif
    
        let g:ycm_filepath_completion_use_working_dir = 1
    
        let g:ycm_add_preview_to_completeopt = 0
        let g:ycm_show_diagnostics_ui = 0
        " let g:ycm_server_log_level = 'info'
        let g:ycm_min_num_identifier_candidate_chars = 2
        let g:ycm_collect_identifiers_from_comments_and_strings = 1
    
        let g:ycm_semantic_triggers =  {
                \ 'c,cpp,cc,python,java,go,erlang,perl': ['re!\w{2}'],
                \ 'cs,lua,javascript': ['re!\w{2}'],
                \ }
        
        " 白名单
        " let g:ycm_filetype_whitelist = {
        " \ "c":1,
        " \ "cpp":1,
        " \ "go":1,
        " \ "py":1,
        " \ "java":1,
        " \ "sh":1,
        " \ "zsh":1,
        " \ }
    
        " 直接触发自动补全 insert模式下
        " let g:ycm_key_invoke_completion = '<C-Space>'
        " 黑名单,不启用
        let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'gitcommit' : 1,
            \}
    " }}}


    " nerdtree
    Plug 'scrooloose/nerdtree'
    " nerdtree {{{
        let g:NERDChristmasTree=0
        let g:NERDTreeWinSize=30
        let g:NERDTreeChDirMode=2
        let g:NERDTreeShowBookmarks=1
    
        " 列出当前目录文件
        map <F6> :NERDTreeToggle<CR>
        imap <F6> <ESC> :NERDTreeToggle<CR>
    
        let NERDTreeHighlightCursorline=1
        let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\~$', '\.swp$' ]
        
        " s/v 分屏打开文件
        let g:NERDTreeMapOpenSplit = 's'
        let g:NERDTreeMapOpenVSplit = 'v'
        " fix Nerdtree ^G before folder and file names OSX terminal vim
        let g:NERDTreeNodeDelimiter = "\u00a0"
    
    
        " nerdtreetabs
        map <Leader>n <plug>NERDTreeTabsToggle<CR>
        " 关闭同步
        " let g:nerdtree_tabs_synchronize_view=0
        " let g:nerdtree_tabs_synchronize_focus=0
        " 是否自动开启nerdtree
        " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
        let g:nerdtree_tabs_open_on_console_startup=0
        let g:nerdtree_tabs_open_on_gui_startup=0
    
        let g:NERDTreeWinPos = "left"
    
        "当打开vim且没有文件时自动打开NERDTree
        autocmd vimenter * if !argc() | NERDTree | endif
        " 只剩 NERDTree时自动关闭
        autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " json
    Plug 'elzr/vim-json', {'for': 'json'}

    " json {{{
        let g:vim_json_syntax_conceal = 0
    " }}}

endif

if count(g:plugged_groups, 'bazel')
    " https://github.com/bazelbuild/vim-bazel
    " Add maktaba and bazel to the runtimepath.
    " (The latter must be installed before it can be used.)
    " vim-bazel is a plugin for only invoking bazel and interacting with bazel artifacts.
    " .bzl file syntax and filetype setting already in vim-core
    Plug 'google/vim-maktaba'
    Plug 'bazelbuild/vim-bazel'
endif

if count(g:plugged_groups, 'graphviz')
    Plug 'liuchengxu/graphviz.vim'

    " How to open the generated output file.
    " If does not exist, graphviz.vim will automatically choose the right way depending on the platform.
    " let g:graphviz_viewer = 'open'
    
    " Default output format. Default is 'pdf'.
    " let g:graphviz_output_format = 'pdf'
    
    " Options passed on to dot. Default is ''.
    " let g:graphviz_shell_option = ''
endif

if count(g:plugged_groups, 'coc')
    " cocnvim smart engine
    " Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " cocnvim {{{
        " 启动coc.nvim自动安装的插件
        " coc-clang-format-style-options 辅助写 .clang-format
        " coc-clangd clangd的前端, 方便配置
        let g:coc_global_extensions = ['coc-yaml', 'coc-json', 'coc-explorer', 'coc-clang-format-style-options', 'coc-clangd' ]

        " Use tab for trigger completion with characters ahead and navigate.
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config.
        inoremap <silent><expr> <TAB>
              \ pumvisible() ? "\<C-n>" :
              \ <SID>check_back_space() ? "\<TAB>" :
              \ coc#refresh()
        inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

        function! s:check_back_space() abort
          let col = col('.') - 1
          return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " Use <c-space> to trigger completion.
        inoremap <silent><expr> <c-space> coc#refresh()

        " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
        " position. Coc only does snippet and additional edit on confirm.
        if exists('*complete_info')
          inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
        else
          imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
        endif

        " Use `[g` and `]g` to navigate diagnostics
        nmap <silent> [g <Plug>(coc-diagnostic-prev)
        nmap <silent> ]g <Plug>(coc-diagnostic-next)

        " GoTo code navigation.
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)

        nmap tt :CocCommand explorer<CR>

        " Use K to show documentation in preview window.
        " nnoremap <silent> K :call <SID>show_documentation()<CR>

        function! s:show_documentation()
          if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
          else
            call CocAction('doHover')
          endif
        endfunction

        " Highlight the symbol and its references when holding the cursor.
        autocmd CursorHold * silent call CocActionAsync('highlight')

        " Symbol renaming.
        nmap <leader>rn <Plug>(coc-rename)

        " Formatting selected code.
        xmap <leader>f  <Plug>(coc-format-selected)
        nmap <leader>f  <Plug>(coc-format-selected)

        augroup mygroup
          autocmd!
          " Setup formatexpr specified filetype(s).
          autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
          " Update signature help on jump placeholder.
          autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end

        " Applying codeAction to the selected region.
        " Example: `<leader>aap` for current paragraph
        xmap <leader>a  <Plug>(coc-codeaction-selected)
        nmap <leader>a  <Plug>(coc-codeaction-selected)

        " Remap keys for applying codeAction to the current line.
        nmap <leader>ac  <Plug>(coc-codeaction)
        " Apply AutoFix to problem on the current line.
        nmap <leader>qf  <Plug>(coc-fix-current)

        " Introduce function text object
        " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
        xmap if <Plug>(coc-funcobj-i)
        xmap af <Plug>(coc-funcobj-a)
        omap if <Plug>(coc-funcobj-i)
        omap af <Plug>(coc-funcobj-a)

        " Use <TAB> for selections ranges.
        " NOTE: Requires 'textDocument/selectionRange' support from the language server.
        " coc-tsserver, coc-python are the examples of servers that support it.
        " nmap <silent> <TAB> <Plug>(coc-range-select)
        " xmap <silent> <TAB> <Plug>(coc-range-select)

        " Add `:Format` command to format current buffer.
        command! -nargs=0 Format :call CocAction('format')

        " Add `:Fold` command to fold current buffer.
        command! -nargs=? Fold :call     CocAction('fold', <f-args>)

        " Add `:OR` command for organize imports of the current buffer.
        command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

        " Add (Neo)Vim's native statusline support.
        " NOTE: Please see `:h coc-status` for integrations with external plugins that
        " provide custom statusline: lightline.vim, vim-airline.
        set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

        " Mappings using CoCList:
        " Show all diagnostics.
        nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
        " Manage extensions.
        nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
        " Show commands.
        nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
        " Find symbol of current document.
        nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
        " Search workspace symbols.
        nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
        " Do default action for next item.
        nnoremap <silent> <space>j  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
        " Resume latest coc list.
        nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
    " }}}

    " coc-explorer {{{
        let g:coc_explorer_global_presets = {
        \   '.vim': {
        \      'root-uri': '~/.vim',
        \   },
        \   'floating': {
        \      'position': 'floating',
        \   },
        \   'floatingLeftside': {
        \      'position': 'floating',
        \      'floating-position': 'left-center',
        \      'floating-width': 30,
        \   },
        \   'floatingRightside': {
        \      'position': 'floating',
        \      'floating-position': 'left-center',
        \      'floating-width': 30,
        \   },
        \   'simplify': {
        \     'file.child.template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
        \   }
        \ }

        autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif
        
        map <F6> :CocCommand explorer <CR>
        
        function! AuCocExplorerAutoOpen()
            if @% == '' || @% == '.'
                exe ':CocCommand explorer'
            endif
        endfunction
        
        autocmd User CocNvimInit call AuCocExplorerAutoOpen()

        " Use preset argument to open it
        " nmap <space>ed :CocCommand explorer --preset .vim<CR>
        " nmap <space>ef :CocCommand explorer --preset floating<CR>
    " }}}

    " vista
    Plug 'liuchengxu/vista.vim'
    " vista {{{
        " How each level is indented and what to prepend.
        " This could make the display more compact or more spacious.
        " e.g., more compact: ["▸ ", ""]
        " Note: this option only works the LSP executives, doesn't work for `:Vista ctags`.
        let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
        let g:vista_sidebar_width = 30
        let g:vista_echo_cursor_strategy = 'floating_win'
        " 设置为0，以禁用光标移动时的回显.
        let g:vista_echo_cursor = 1

        " Executive used when opening vista sidebar without specifying it.
        " See all the avaliable executives via `:echo g:vista#executives`.
        let g:vista_default_executive = 'coc'

        " Map F9 to toggle sidebar
        nnoremap <F9> :Vista!!<CR>
        " nnoremap <leader>bt :Vista finder<CR>

        " Set the executive for some filetypes explicitly. Use the explicit executive
        " instead of the default one for these filetypes when using `:Vista` without
        " specifying the executive.
        let g:vista_executive_for = {
          \ 'cpp': 'coc',
          \ 'go': 'coc',
          \ 'c': 'coc',
          \ 'rust': 'coc',
          \ }

        " 跳转到标记后闪烁光标2次，间隔100ms.
        let g:vista_blink = [2, 100]

        " To enable fzf's preview window set g:vista_fzf_preview.
        " The elements of g:vista_fzf_preview will be passed as arguments to fzf#vim#with_preview()
        " For example:
        " let g:vista_fzf_preview = ['right:50%']

        " 图标美化
        let g:vista#renderer#enable_icon = 1
        let g:vista#renderer#icons = {
        \ "function": "\uf30b",
        \ "variable": "\uf5c0",
        \ }

        let g:vista_finder_alternative_executives = ['coc']

    " }}}

    Plug 'jackguo380/vim-lsp-cxx-highlight'
    " cxx-highlight {{{
        let g:cpp_class_scope_highlight = 1
        let g:cpp_member_variable_highlight = 1
        let g:cpp_class_decl_highlight = 1
    " }}}
endif

 " tagbar
Plug 'preservim/tagbar'
" 标签导航
" tagbar {{{
    nmap <F12> :TagbarToggle<CR>
    " let g:tagbar_left=1
    let g:tagbar_width=25
    let g:tagbar_autofocus = 1
    let g:tagbar_sort = 0
    let g:tagbar_compact = 1
    let g:tagbar_autofocus = 1
    " let g:tagbar_autoshowtag = 1
    " let g:tagbar_show_visibility = 1

    " " for ruby
    " let g:tagbar_type_ruby = {
    "     \ 'kinds' : [
    "         \ 'm:modules',
    "         \ 'c:classes',
    "         \ 'd:describes',
    "         \ 'C:contexts',
    "         \ 'f:methods',
    "         \ 'F:singleton methods'
    "     \ ]
    " \ }
    
    " " go语言的tagbar配置
    " " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " " for gotags. work with tagbar
    " let g:tagbar_type_go = {
    "     \ 'ctagstype' : 'go',
    "     \ 'kinds'     : [
    "         \ 'p:package',
    "         \ 'i:imports:1',
    "         \ 'c:constants',
    "         \ 'v:variables',
    "         \ 't:types',
    "         \ 'n:interfaces',
    "         \ 'w:fields',
    "         \ 'e:embedded',
    "         \ 'm:methods',
    "         \ 'r:constructor',
    "         \ 'f:functions'
    "     \ ],
    "     \ 'sro' : '.',
    "     \ 'kind2scope' : {
    "         \ 't' : 'ctype',
    "         \ 'n' : 'ntype'
    "     \ },
    "     \ 'scope2kind' : {
    "         \ 'ctype' : 't',
    "         \ 'ntype' : 'n'
    "     \ },
    "     \ 'ctagsbin'  : 'gotags',
    "     \ 'ctagsargs' : '-sort -silent'
    " \ }
" }}}

" 快速加入修改环绕字符
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat' | Plug 'tpope/vim-surround'
" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'
" easyalign
" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'

" quick movement
" easymotion
"更高效的移动 [,, + w/fx/h/j/k/l]
Plug 'Lokaltog/vim-easymotion'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

" gutentags
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'

Plug 'vim-scripts/matchit.zip'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'

" quick selection and edit
" expandregion
" 选中区块
Plug 'terryma/vim-expand-region'

" 多光标选中编辑
" visualmulti
Plug 'mg979/vim-visual-multi'

" On-demand lazy load
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }

" git
" fugitive
Plug 'tpope/vim-fugitive'
" git-blame
Plug 'zivyangll/git-blame.vim'

" gundo
" edit history, 可以查看回到某个历史状态
Plug 'sjl/gundo.vim'

" view
" 状态栏增强展示
" airline 
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" lightline
" Plug 'itchyny/lightline.vim'

" rainbow_parentheses
" 括号显示增强
" Plug 'kien/rainbow_parentheses.vim'
" rainbow  基于 rainbow_parentheses方便配置
Plug 'luochen1990/rainbow'

" molokai
" 主题 molokai
Plug 'tomasr/molokai'
Plug 'patstockwell/vim-monokai-tasty'


" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'

"" 模糊搜索
" leaderf
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }

" vim-clap 
" The bang version will try to download the prebuilt binary if cargo does not exist.
" Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }

" :Clap install-binary[!] will always try to compile the binary locally,
" if you do care about the disk used for the compilation, try using the force download way,
" which will download the prebuilt binary even you have installed cargo.
Plug 'liuchengxu/vim-clap', { 'do': { -> clap#installer#force_download() } }

" fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

"" quick edit
"" 快速注释
Plug 'scrooloose/nerdcommenter'

" format
Plug 'rhysd/vim-clang-format'

" text object
" 支持自定义文本对象
Plug 'kana/vim-textobj-user'
" 增加行文本对象: l   dal yal cil
Plug 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plug 'kana/vim-textobj-entire'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plug 'kana/vim-textobj-indent'

if count(g:plugged_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'

    " tmux {{{
        " for tmux
        if exists('$TMUX')
            set term=screen-256color
        endif
    " }}}
endif

if count(g:plugged_groups, 'markdown-edit')
    " see: https://github.com/plasticboy/vim-markdown
    Plug 'godlygeek/tabular' | Plug 'plasticboy/vim-markdown'

    " vim-markdown {{{
        let g:vim_markdown_conceal = 0
        let g:vim_markdown_folding_level = 6
        let g:vim_markdown_frontmatter = 1
        let g:vim_markdown_math = 1
        let g:tex_conceal = ""
        let g:vim_markdown_json_frontmatter = 1
    " }}}
endif

if count(g:plugged_groups, 'markdown-preview')
    " If you don't have nodejs and yarn
    " use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
    " see: https://github.com/iamcco/markdown-preview.nvim/issues/50
    Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}


    " If you have nodejs and yarn
    " Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

    " markdown-preview {{{
        " set to 1, nvim will open the preview window after entering the markdown buffer
        " default: 0
        let g:mkdp_auto_start = 0

        " set to 1, the nvim will auto close current preview window when change
        " from markdown buffer to another buffer
        " default: 1
        let g:mkdp_auto_close = 1

        " set to 1, the vim will refresh markdown when save the buffer or
        " leave from insert mode, default 0 is auto refresh markdown as you edit or
        " move the cursor
        " default: 0
        let g:mkdp_refresh_slow = 0

        " set to 1, the MarkdownPreview command can be use for all files,
        " by default it can be use in markdown file
        " default: 0
        let g:mkdp_command_for_global = 0

        " set to 1, preview server available to others in your network
        " by default, the server listens on localhost (127.0.0.1)
        " default: 0
        let g:mkdp_open_to_the_world = 0

        " use custom IP to open preview page
        " useful when you work in remote vim and preview on local browser
        " more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
        " default empty
        let g:mkdp_open_ip = ''

        " specify browser to open preview page
        " default: ''
        let g:mkdp_browser = ''

        " set to 1, echo preview page url in command line when open preview page
        " default is 0
        let g:mkdp_echo_preview_url = 0

        " a custom vim function name to open preview page
        " this function will receive url as param
        " default is empty
        let g:mkdp_browserfunc = ''

        " options for markdown render
        " mkit: markdown-it options for render
        " katex: katex options for math
        " uml: markdown-it-plantuml options
        " maid: mermaid options
        " disable_sync_scroll: if disable sync scroll, default 0
        " sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
        "   middle: mean the cursor position alway show at the middle of the preview page
        "   top: mean the vim top viewport alway show at the top of the preview page
        "   relative: mean the cursor position alway show at the relative positon of the preview page
        " hide_yaml_meta: if hide yaml metadata, default is 1
        " sequence_diagrams: js-sequence-diagrams options
        " content_editable: if enable content editable for preview page, default: v:false
        " disable_filename: if disable filename header for preview page, default: 0
        let g:mkdp_preview_options = {
            \ 'mkit': {},
            \ 'katex': {},
            \ 'uml': {},
            \ 'maid': {},
            \ 'disable_sync_scroll': 0,
            \ 'sync_scroll_type': 'middle',
            \ 'hide_yaml_meta': 1,
            \ 'sequence_diagrams': {},
            \ 'flowchart_diagrams': {},
            \ 'content_editable': v:false,
            \ 'disable_filename': 0
            \ }

        " use a custom markdown style must be absolute path
        " like '/Users/username/markdown.css' or expand('~/markdown.css')
        let g:mkdp_markdown_css = ''

        " use a custom highlight style must absolute path
        " like '/Users/username/highlight.css' or expand('~/highlight.css')
        let g:mkdp_highlight_css = ''

        " use a custom port to start server or random for empty
        let g:mkdp_port = ''

        " preview page title
        " ${name} will be replace with the file name
        let g:mkdp_page_title = '「${name}」'

        " recognized filetypes
        " these filetypes will have MarkdownPreview... commands
        let g:mkdp_filetypes = ['markdown']
        
        " Mappings:
        " normal/insert
        " <Plug>MarkdownPreview
        " <Plug>MarkdownPreviewStop
        " <Plug>MarkdownPreviewToggle

        " example
        nmap <C-m> <Plug>MarkdownPreview
        "nmap <M-s> <Plug>MarkdownPreviewStop
        "nmap <C-p> <Plug>MarkdownPreviewToggle

        " Command 
        " :MarkdownPreview
        " :MarkdownPreviewStop
    " }}}
endif

if count(g:plugged_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo  https://github.com/fatih/vim-go
    Plug 'fatih/vim-go', {'for': 'go'}

    " vimgo {{{
        let g:go_highlight_functions = 1
        let g:go_highlight_methods = 1
        let g:go_highlight_fields = 1
        let g:go_highlight_types = 1
        let g:go_highlight_function_parameters = 1
        let g:go_highlight_structs = 1
        let g:go_highlight_operators = 1
        let g:go_highlight_build_constraints = 1

        let g:go_fmt_command = "goimports"
        let g:go_def_mode = 'gopls'
        let g:go_info_mode='gopls'
        let g:go_fmt_fail_silently = 1
        " format with goimports instead of gofmt
        let g:go_fmt_command = "goimports"
        let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
        let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go', 'java'] }
    " }}}
endif

if count(g:plugged_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax'
    Plug 'hynek/vim-python-pep8-indent'
    Plug 'Glench/Vim-Jinja2-Syntax'

    " pythonsyntax {{{
        let python_highlight_all = 1
    " }}}

    " isort  https://github.com/timothycrosley/isort#readme + https://github.com/fisadev/vim-isort#installation
    " pip install isort
    Plug 'fisadev/vim-isort'
    " Shift-V 上下选中, ctrl + i 规范化
    " let g:vim_isort_map = '<C-i>'
endif

if count(g:plugged_groups, 'php')
    " piv
    " shift-v可以查看函数手册 / leader-pd生成注释
    Plug 'spf13/PIV'

    " piv {{{
        let g:DisableAutoPHPFolding = 1
    " }}}
endif

if count(g:plugged_groups, 'ruby')
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-rails'
    " dir / dar
    Plug 'nelstrom/vim-textobj-rubyblock'

    " 有bug, 和当前有冲突, 尚未解决, 不要打开 => TODO: solve this problem
    " Plug 'tpope/vim-endwise'
endif

if count(g:plugged_groups, 'javascript')
    " javascript
    " 注意: syntax这个插件要放前面
    Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
    " Plug 'jelera/vim-javascript-syntax' | Plug 'pangloss/vim-javascript'

    " TODO: jquery? for, remove or keep
    Plug 'othree/javascript-libraries-syntax.vim'
    let g:used_javascript_libs = 'jquery,underscore,backbone'

    " for javascript 自动补全, 配合YCM, 需要安装全局环境的（非nvm中) node.js&npm
    " 安装完成后还需要在 bundle/tern_for_vim 下执行 npm install 安装依赖 `cd ~/.vim/plugged/tern_for_vim && npm install`
    " see https://github.com/marijnh/tern_for_vim
    " Plug 'marijnh/tern_for_vim', {'do': 'npm install'}

    " javascript {{{
        " pangloss/vim-javascript
        let g:html_indent_inctags = "html,body,head,tbody"
        let g:html_indent_script1 = "inc"
        let g:html_indent_style1 = "inc"
    " }}}
endif

if count(g:plugged_groups, 'rust')
    " rust 
    Plug 'rust-lang/rust.vim'

    " rust {{{
        " let g:rustfmt_autosave = 1
    " }}}
endif

if count(g:plugged_groups, 'coffeescript')
    Plug 'kchmck/vim-coffee-script'
endif

" if count(g:plugged_groups, 'shell')
    " Plug 'Shougo/vimshell.vim'
" endif

if count(g:plugged_groups, 'less')
    " ###### vim.less : less 自动更新##########
    Plug 'groenewege/vim-less'
    " autocmd BufWritePost *.less :!lessc % > %:p:r.css
endif

if count(g:plugged_groups, 'protobuf')
    " protobuf
    Plug 'uarun/vim-protobuf'
    Plug 'tenfyzhong/tagbar-proto.vim'
endif 

" this is just for beta version
if count(g:plugged_groups, 'beta')
    " indent
    Plug 'nathanaelkane/vim-indent-guides'
    " <leader>ig to trigger
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 1
    " autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=black
    " autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=black

    " Plug 'robbles/logstash.vim'
    " Plug 'ryanoasis/vim-devicons'
    " Plug 'ekalinin/dockerfile.vim'

    " Plug 'ConradIrwin/vim-bracketed-paste'
    " Plug 'roxma/vim-paste-easy'
endif

" Add plugins to &runtimepath
call plug#end()

" ################## 以下为各插件的增强配置 #########

" ################### 基础 ######################

" 热键管理插件
" vim-which-key {{{
    " :h vim-which-key 
    " @todo: custom hot-key cheatsheet
    " Command example :WhichKey 'g'
    let g:which_key_map =  {}
    " let g:which_key_map['g'] = {
	" 		\ 'name': '+coc.goto',
	" 		\ 'y' : 'go to type definition',
	" 		\ 'i' : 'go to implementation',
	" 		\ 'r' : 'go to references',
	" 		\ 'd' : 'go to definition',
	" 		\ }
" }}}

" ################### 自动补全 ###################

" gutentags {{{
    let $GTAGSLABEL = 'native-pygments'
    let $GTAGSCONF = '/usr/local/share/gtags/gtags.conf'
    " gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
    let g:gutentags_project_root = ['.project', '.maye', '.git', 'BUILD', 'Makefile', 'makefile']

    " 同时开启 ctags 和 gtags 支持：
    let g:gutentags_modules = []
    if executable('ctags')
       let g:gutentags_modules += ['ctags']
    endif
    if executable('gtags-cscope') && executable('gtags')
       let g:gutentags_modules += ['gtags_cscope']
    endif

    set statusline+=%{gutentags#statusline()}

    " 所生成的数据文件的名称 "
    let g:gutentags_ctags_tagfile = '.tags'

    " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
    let s:vim_tags = expand('~/.cache/tags')
    let g:gutentags_cache_dir = s:vim_tags
    " 检测 ~/.cache/tags 不存在就新建 "
    if !isdirectory(s:vim_tags)
        silent! call mkdir(s:vim_tags, 'p')
    endif
    " change focus to quickfix window after search (optional).
    let g:gutentags_plus_switch = 1

    " 配置 ctags 的参数 "
    let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
    let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
    let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

    " 禁用 gutentags 自动加载 gtags 数据库的行为
    let g:gutentags_auto_add_gtags_cscope = 0

    " <leader>cs	Find symbol (reference) under cursor
    " <leader>cg	Find symbol definition under cursor
    " <leader>cd	Functions called by this function
    " <leader>cc	Functions calling this function
    " <leader>ct	Find text string under cursor
    " <leader>ce	Find egrep pattern under cursor
    " <leader>cf	Find file name under cursor
    " <leader>ci	Find files #including the file name under cursor
    " <leader>ca	Find places where current symbol is assigned
    " <leader>cz	Find current word in ctags database
    let g:gutentags_plus_nomap = 1
    noremap <silent> <leader>cr :GscopeFind s <C-R><C-W><cr>
    noremap <silent> <leader>cd :GscopeFind g <C-R><C-W><cr>
    noremap <silent> <leader>cg :GscopeFind d <C-R><C-W><cr>
    noremap <silent> <leader>cc :GscopeFind c <C-R><C-W><cr>
    noremap <silent> <leader>ct :GscopeFind t <C-R><C-W><cr>
    noremap <silent> <leader>ce :GscopeFind e <C-R><C-W><cr>
    noremap <silent> <leader>cf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
    noremap <silent> <leader>ci :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
    noremap <silent> <leader>ca :GscopeFind a <C-R><C-W><cr>
    noremap <silent> <leader>cz :GscopeFind z <C-R><C-W><cr>

    " 打开强化命令
    let g:gutentags_define_advanced_commands = 1
    " :GutentagsToggleTrace
    " :GutentagsUpdate
    " :messages  来查看信息
" }}}

" ultisnips {{{
    let g:UltiSnipsExpandTrigger       = "<tab>"
    let g:UltiSnipsJumpForwardTrigger  = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
    let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
    " 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
    " 进入对应filetype的snippets进行编辑
    map <leader>us :UltiSnipsEdit<CR>

    " ctrl+j/k 进行选择
    func! g:JInYCM()
        if pumvisible()
            return "\<C-n>"
        else
            return "\<c-j>"
        endif
    endfunction

    func! g:KInYCM()
        if pumvisible()
            return "\<C-p>"
        else
            return "\<c-k>"
        endif
    endfunction
    inoremap <c-j> <c-r>=g:JInYCM()<cr>
    au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
    let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}

" leaderf {{{
    " don't show the help in normal mode
    let g:Lf_HideHelp = 1
    let g:Lf_UseCache = 0
    let g:Lf_UseVersionControlTool = 0
    let g:Lf_IgnoreCurrentBufferName = 1
    " popup mode
    let g:Lf_WindowPosition = 'popup'
    let g:Lf_PreviewInPopup = 1
    let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
    let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

    " let g:Lf_ShortcutF = '<C-P>'  " "<leader>ff"
    noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
    noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
    noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
    noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

    noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
    noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
    " search visually selected text literally
    xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
    noremap go :<C-U>Leaderf! rg --recall<CR>

    " Show icons, icons are shown by default
    let g:Lf_ShowDevIcons = 1
    " For GUI vim, the icon font can be specify like this, for example
    let g:Lf_DevIconsFont = "DejaVuSansMono Nerd Font Mono"

    " should use `Leaderf gtags --update` first
    let g:Lf_GtagsAutoGenerate = 0
    let g:Lf_Gtagslabel = 'native-pygments'
    noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
    noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
    noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
    noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
    noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
    noremap <leader>lf :<C-U><C-R>=printf("LeaderfFunction!")<CR><CR>
" }}}

" vim-clap {{{
    " noremap <C-F> :<C-U><C-R>=printf("Clap grep"))<CR><CR>
" }}}

" fzf.vim {{{
    noremap <C-P> :<C-U><C-R>=printf("FZF")<CR><CR>
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
    " keymap reference https://github.com/preservim/nerdcommenter
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
    let g:NERDCompactSexyComs=1

    " turn off default keymap, remap
    let g:NERDCreateDefaultMappings = 0
    map <leader>c<space> <plug>NERDCommenterToggle
" }}}

" trailingwhitespace {{{
    map <leader><space> :FixWhitespace<cr>
" }}}

" easyalign {{{
    vmap <Leader>a <Plug>(EasyAlign)
    nmap <Leader>a <Plug>(EasyAlign)
    if !exists('g:easy_align_delimiters')
    let g:easy_align_delimiters = {}
    endif
    let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
    " Default:
    " If a delimiter is in a highlight group whose name matches any of the followings, it will be ignored.
    let g:easy_align_ignore_groups = ['Comment', 'String']
" }}}

" ################### 快速移动 ###################

" easymotion {{{
    let g:EasyMotion_smartcase = 1
    "let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
    map <Leader><leader>h <Plug>(easymotion-linebackward)
    map <Leader><Leader>j <Plug>(easymotion-j)
    map <Leader><Leader>k <Plug>(easymotion-k)
    map <Leader><leader>l <Plug>(easymotion-lineforward)
    " 重复上一次操作, 类似repeat插件, 很强大
    map <Leader><leader>. <Plug>(easymotion-repeat)
" }}}

" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
    " macvim/gvim会有问题, 暂时注解
    " let g:qs_first_occurrence_highlight_color = '#afff5f' " gui vim
    " let g:qs_first_occurrence_highlight_color = 155       " terminal vim
    " let g:qs_second_occurrence_highlight_color = '#5fffff'  " gui vim
    " let g:qs_second_occurrence_highlight_color = 81         " terminal vim
" }}}

" ################### 快速选中 ###################

" expandregion {{{
    " map + <Plug>(expand_region_expand)
    " map _ <Plug>(expand_region_shrink)
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
    " Extend the global default
    if exists("*expand_region#custom_text_objects")
        call expand_region#custom_text_objects({
        \ 'a]' :1,
        \ 'ab' :1,
        \ 'aB' :1,
        \ 'ii' :0,
        \ 'ai' :0,
        \ })
    endif
" }}}

" #################  多列编辑 ##################

" visualmulti {{{
    " https://github.com/mg979/vim-visual-multi/wiki/Quick-start
    let g:VM_maps = {}
    let g:VM_maps['Find Under']         = '<C-n>'           " replace C-n
    let g:VM_maps['Find Subword Under'] = '<C-n>'           " replace visual C-n
    let g:VM_maps["Select l"]           = '<S-Right>'       " start selecting left
    let g:VM_maps["Select h"]           = '<S-Left>'        " start selecting right
    let g:VM_maps["Select Cursor Down"] = '<M-C-j>'      " start selecting down
    let g:VM_maps["Select Cursor Up"]   = '<M-C-k>'        " start selecting up
    let g:VM_maps["Add Cursor Down"]    = '<S-Down>'
    let g:VM_maps["Add Cursor Up"]      = '<S-Up>'

    let g:VM_mouse_mappings = 1
    nmap   <D-LeftMouse>         <Plug>(VM-Mouse-Cursor)
    nmap   <D-RightMouse>        <Plug>(VM-Mouse-Word)
    nmap   <M-D-RightMouse>      <Plug>(VM-Mouse-Column)
" }}}

" ################### 功能相关 ###################

" http://startheap.com/2018/08/17/The-method-by-which-vim-configures-clang-format-under-Linux/
" https://github.com/rhysd/vim-clang-format
" vim-clang-format {{{
    let g:clang_format#command = 'clang-format'
    " nmap <F4> :ClangFormat<cr>
    autocmd FileType c ClangFormatAutoEnable
    let g:clang_format#detect_style_file = 0

    let g:clang_format#style_options = {
            \ "Language" : "Cpp",
            \ "BasedOnStyle" : "Google",
            \ "AccessModifierOffset" : -1,
            \ "AlignAfterOpenBracket" : "true",
            \ "AlignEscapedNewlinesLeft" : "true",
            \ "AlignOperands" : "true",
            \ "AlignTrailingComments" : "true",
            \ "AllowAllParametersOfDeclarationOnNextLine" : "true",
            \ "AllowShortBlocksOnASingleLine" : "false",
            \ "AllowShortCaseLabelsOnASingleLine" : "false",
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AllowShortLoopsOnASingleLine" : "true",
            \ "AllowShortFunctionsOnASingleLine" : "All",
            \ "AlwaysBreakAfterDefinitionReturnType" : "false",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "AlwaysBreakBeforeMultilineStrings" : "true",
            \ "BreakBeforeBinaryOperators" : "None",
            \ "BreakBeforeTernaryOperators" : "true",
            \ "BreakConstructorInitializersBeforeComma" : "false",
            \ "BinPackParameters" : "true",
            \ "BinPackArguments" : "true",
            \ "ColumnLimit" : 80,
            \ "ConstructorInitializerAllOnOneLineOrOnePerLine" : "true",
            \ "ConstructorInitializerIndentWidth" : 4,
            \ "DerivePointerAlignment" : "true",
            \ "ExperimentalAutoDetectBinPacking" : "false",
            \ "IndentCaseLabels" : "true",
            \ "IndentWrappedFunctionNames" : "false",
            \ "IndentFunctionDeclarationAfterType" : "false",
            \ "MaxEmptyLinesToKeep" : 1,
            \ "KeepEmptyLinesAtTheStartOfBlocks" : "false",
            \ "NamespaceIndentation" : "None",
            \ "ObjCBlockIndentWidth" : 2,
            \ "ObjCSpaceAfterProperty" : "false",
            \ "ObjCSpaceBeforeProtocolList" : "false",
            \ "PenaltyBreakBeforeFirstCallParameter" : 1,
            \ "PenaltyBreakComment" : 300,
            \ "PenaltyBreakString" : 1000,
            \ "PenaltyBreakFirstLessLess" : 120,
            \ "PenaltyExcessCharacter" : 1000000,
            \ "PenaltyReturnTypeOnItsOwnLine" : 200,
            \ "PointerAlignment" : "Left",
            \ "SpacesBeforeTrailingComments" : 2,
            \ "Cpp11BracedListStyle" : "true",
            \ "Standard" : "Auto",
            \ "IndentWidth" : 4,
            \ "TabWidth" : 4,
            \ "UseTab" : "Never",
            \ "BreakBeforeBraces" : "Attach",
            \ "SpacesInParentheses" : "false",
            \ "SpacesInSquareBrackets" : "false",
            \ "SpacesInAngles" : "false",
            \ "SpaceInEmptyParentheses" : "false",
            \ "SpacesInCStyleCastParentheses" : "false",
            \ "SpaceAfterCStyleCast" : "false",
            \ "SpacesInContainerLiterals" : "true",
            \ "SpaceBeforeAssignmentOperators" : "true",
            \ "ContinuationIndentWidth" : 4 }

" }}}

" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作

" fugitive {{{
    " :Gdiff  :Gstatus :Gvsplit
    nnoremap <leader>ge :Gdiff<CR>
    " not ready to open
    " <leader>gb maps to :Gblame<CR>
    " <leader>gs maps to :Gstatus<CR>
    " <leader>gd maps to :Gdiff<CR>  和现有冲突
    " <leader>gl maps to :Glog<CR>
    " <leader>gc maps to :Gcommit<CR>
    " <leader>gp maps to :Git push<CR>
" }}}

" git-blame {{{
    nnoremap <Leader>gs :<C-u>call gitblame#echo()<CR>
" }}}

" gundo {{{
    nmap <F3> :GundoToggle<CR>
    " gundo 支持python3
    if has('python3')
        let g:gundo_prefer_python3 = 1
    endif
" }}}

" ################### 显示增强 ###################

" lightline {{{

" }}}

" airline {{{
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif
    " let g:airline_left_sep = '▶'
    " let g:airline_left_alt_sep = '❯'
    " let g:airline_right_sep = '◀' 
    " let g:airline_right_alt_sep = '❮'
    let g:airline_left_seq = '' " '\uE0B0'
    let g:airline_left_alt_sep = '' " '\uE0B1'
    let g:airline_right_sep = ''  " '\uE0B2'
    let g:airline_right_alt_sep = ''  " \uE0B3'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.whitespace = 'Ξ'
    " 是否打开tabline
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
    let g:airline#extensions#tabline#show_tab_nr = 1
    let g:airline#extensions#tabline#buffer_nr_show = 1
    let g:airline#extensions#tabline#fnametruncate = 16
    let g:airline#extensions#tabline#fnamecollapse = 2
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " disanbled whitespace check
    let g:airline#extensions#whitespace#enabled = 0
    set completeopt-=preview

    " set airline-theme
    " let g:airline_theme='powerlineish'
" }}}

" rainbow {{{
    let g:rainbow_active = 1
    let g:rainbow_conf = {
    \	'guifgs':   ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \	'operators': '_,_',
    \	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \	'separately': {
    \		'*': {},
    \		'tex': {
    \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \		},
    \		'lisp': {
    \			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \		},
    \		'vim': {
    \			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \		},
    \		'html': {
    \			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \		},
    \		'css': 0,
    \	}
    \}
" }}}

" rainbow_parentheses {{{
    " " 不加入这行, 防止黑色括号出现, 很难识别
    " " \ ['black',       'SeaGreen3'],
    " let g:rbpt_colorpairs = [
    "     \ ['brown',       'RoyalBlue3'],
    "     \ ['Darkblue',    'SeaGreen3'],
    "     \ ['darkgray',    'DarkOrchid3'],
    "     \ ['darkgreen',   'firebrick3'],
    "     \ ['darkcyan',    'RoyalBlue3'],
    "     \ ['darkred',     'SeaGreen3'],
    "     \ ['darkmagenta', 'DarkOrchid3'],
    "     \ ['brown',       'firebrick3'],
    "     \ ['gray',        'RoyalBlue3'],
    "     \ ['darkmagenta', 'DarkOrchid3'],
    "     \ ['Darkblue',    'firebrick3'],
    "     \ ['darkgreen',   'RoyalBlue3'],
    "     \ ['darkcyan',    'SeaGreen3'],
    "     \ ['darkred',     'DarkOrchid3'],
    "     \ ['red',         'firebrick3'],
    "     \ ]
    " let g:rbpt_max = 16
    " let g:rbpt_loadcmd_toggle = 0
" }}}


" ################### 显示增强-主题 ###################"

" molokai {{{
    " monokai原始背景色
    let g:molokai_original = 1
    let g:rehash256 = 1
" }}}

" ################### 快速导航 ###################


" Vim Workspace Controller
" ctrlspace {{{
    let g:airline_exclude_preview = 1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8
" }}}


" ################### 语言相关 ###################


" ####### temp #######

" beta {{{
    

" }}}

"------------------------------------------- end of configs --------------------------------------------
